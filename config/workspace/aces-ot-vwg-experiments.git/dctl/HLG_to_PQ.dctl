DEFINE_UI_PARAMS(L_b, L_b, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(L_w, L_w, DCTLUI_VALUE_BOX, 1000.0)

__CONSTANT__ float pq_m1 = 0.1593017578125f;
__CONSTANT__ float pq_m2 = 78.84375f;
__CONSTANT__ float pq_c1 = 0.8359375f;
__CONSTANT__ float pq_c2 = 18.8515625f;
__CONSTANT__ float pq_c3 = 18.6875f;
__CONSTANT__ float pq_C = 10000.0f;

__DEVICE__ inline float Y_2_ST2084( float C ) {
    float L = C / pq_C;
    float Lm = _powf( L, pq_m1 );
    float N = ( pq_c1 + pq_c2 * Lm ) / ( 1.0f + pq_c3 * Lm );
    N = _powf( N, pq_m2 );
    return N;
}

__DEVICE__ inline float3 Y_2_ST2084_f3( float3 in) {
    float3 out;
    out.x = Y_2_ST2084( in.x); 
    out.y = Y_2_ST2084( in.y); 
    out.z = Y_2_ST2084( in.z);
    return out;
}

__DEVICE__ float3 HLG_2_ST2084_1000nits_f3( float3 HLG, float L_b, float L_w) {
    const float a = 0.17883277f;
    const float b = 0.28466892f;
    const float c = 0.55991073f;
//     const float L_w = 1000.0f;
//     const float L_b = 0.0f;
    const float alpha = (L_w - L_b);
    const float beta = L_b;
//     const float gamma = 1.2f;
    float gamma = 1.2f + 0.42f * _log10f(L_w / 1000.0f);
    float3 sceneLinear;
    if ( HLG.x >= 0.0f && HLG.x <= 0.5f) {
        sceneLinear.x = _powf(HLG.x, 2.0f) / 3.0f;
    } else {
        sceneLinear.x = (_expf((HLG.x - c) / a) + b) / 12.0f;
    }
    if ( HLG.y >= 0.0f && HLG.y <= 0.5f) {
        sceneLinear.y = _powf(HLG.y, 2.0f) / 3.0f;
    } else {
    sceneLinear.y = (_expf((HLG.y - c) / a) + b) / 12.0f;
    }
    if ( HLG.z >= 0.0f && HLG.z <= 0.5f) {
        sceneLinear.z = _powf(HLG.z, 2.0f) / 3.0f;
    } else {
        sceneLinear.z = (_expf((HLG.z - c) / a) + b) / 12.0f;
    }
    float Y_s = 0.2627f * sceneLinear.x + 0.6780f * sceneLinear.y + 0.0593f * sceneLinear.z;
    float3 displayLinear;
    displayLinear.x = alpha * _powf( Y_s, gamma - 1.0f) * sceneLinear.x + beta;
    displayLinear.y = alpha * _powf( Y_s, gamma - 1.0f) * sceneLinear.y + beta;
    displayLinear.z = alpha * _powf( Y_s, gamma - 1.0f) * sceneLinear.z + beta;
    float3 PQ = Y_2_ST2084_f3( displayLinear);
    return PQ;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{
    float3 HLG =  make_float3(p_R, p_G, p_B);
    float3 PQ = HLG_2_ST2084_1000nits_f3(HLG, L_b, L_w);
    return PQ;
}