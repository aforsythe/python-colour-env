DEFINE_UI_PARAMS(norm_select, Norm, DCTLUI_COMBO_BOX, 0, {WYP, maxRGB, Luminance, Euclidian}, {Weighted Yellow Power, max(RGB), Luminance, Euclidian distance});
DEFINE_UI_PARAMS(tonemap, Tonemap, DCTLUI_COMBO_BOX, 0, {SDR, HDR600, HDR1000, HDR2000, HDR4000, Custom, None}, {SDR, HDR 600 nits, HDR 1000 nits, HDR 2000 nits, HDR 4000 nits, Custom, None})
DEFINE_UI_PARAMS(min_y, Min Y, DCTLUI_VALUE_BOX, 0.02)
DEFINE_UI_PARAMS(mid_y, Mid Y, DCTLUI_VALUE_BOX, 4.8)
DEFINE_UI_PARAMS(max_y, Max Y, DCTLUI_VALUE_BOX, 48.0)
DEFINE_UI_PARAMS(output_gain, Output Gain, DCTLUI_VALUE_BOX, 1.0)

#include "ACES_LIB_MOD.h"

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{ 
    float r = _fmaxf(0.0f, p_R);
    float g = _fmaxf(0.0f, p_G);
    float b = _fmaxf(0.0f, p_B);
    float norm;

    if (norm_select == WYP)
    {
        norm = 0.83743219f * (_powf(1.22f*r, 5) + _powf(1.20f*g, 5.0f) + _powf(0.58f*b, 5.0f)) / (_powf(1.22f*r, 4.0f) + _powf(1.20f*g, 4.0f) + _powf(0.58f*b, 4.0f));
    }
    if (norm_select == maxRGB)
    {
        norm = _fmaxf(r, _fmaxf(g, b));
    }
    if (norm_select == Luminance)
    {
        norm = 0.2722287168f * r + 0.6740817658f * g + 0.0536895174f * b;
    }
    if (norm_select == Euclidian)
    {
        norm = _sqrtf(r * r + g * g + b * b);
    }

    float tonemapped_norm;
    float scale;
    float Y_MIN;
    float Y_MID;
    float Y_MAX;

    if (tonemap == SDR)
    {
        Y_MIN = 0.02f;
        Y_MID = 4.8f;
        Y_MAX = 48.0f;
        scale =1.0f;
    }
    if (tonemap == HDR600)
    {
        Y_MIN = 0.0001f;
        Y_MID = 15.0f;
        Y_MAX = 600.0f;
        scale = Y_MAX / 100.0f;
    }
    if (tonemap == HDR1000)
    {
        Y_MIN = 0.0001f;
        Y_MID = 15.0f;
        Y_MAX = 1000.0f;
        scale = Y_MAX / 100.0f;
    }
    if (tonemap == HDR2000)
    {
        Y_MIN = 0.0001f;
        Y_MID = 15.0f;
        Y_MAX = 2000.0f;
        scale = Y_MAX / 100.0f;
    }
    if (tonemap == HDR4000)
    {
        Y_MIN = 0.0001f;
        Y_MID = 15.0f;
        Y_MAX = 4000.0f;
        scale = Y_MAX / 100.0f;
    }    
    if (tonemap == Custom)
    {
        Y_MIN = min_y;
        Y_MID = mid_y;
        Y_MAX = max_y;
        scale = output_gain;
    }
    
	TsParams PARAMS_DEFAULT = init_TsParams( Y_MIN, Y_MAX, 0.0f);
	float expShift = _log2f(inv_ssts(Y_MID, PARAMS_DEFAULT)) - _log2f(0.18f);
	TsParams PARAMS = init_TsParams( Y_MIN, Y_MAX, expShift);
	tonemapped_norm = ssts(norm, PARAMS);
	tonemapped_norm = Y_2_linCV(tonemapped_norm, Y_MAX, Y_MIN);
    
    if (tonemap == None)
    {
        tonemapped_norm = norm;
        scale = 1.0f;
    }
    
    // Scale so 100 nits is 1.0
    tonemapped_norm *= scale;
    
    if (norm == 0.0f || isnan(tonemapped_norm))
    {
        norm = 1.0f;
        tonemapped_norm = 1.0f;
    }
    
    r *= tonemapped_norm / norm;
    g *= tonemapped_norm / norm;
    b *= tonemapped_norm / norm;
    
    float3 output;
    
    // Apply AP0 to Rec.2020 matrix with Bradford CAT to produce D65 Rec.2020 display linear
    output.x = r * 1.02582475f + g * -0.02005319f + b * -0.00577156f;
    output.y = r * -0.00223437f + g * 1.00458650f + b * -0.00235213f;
    output.z = r * -0.00501335f + g * -0.02529007f + b * 1.03030342f;

    return output;
}