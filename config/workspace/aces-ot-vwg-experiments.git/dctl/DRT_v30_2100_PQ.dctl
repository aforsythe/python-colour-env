DEFINE_UI_PARAMS(toneCurve, Tone Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(compressChroma, Compress Chroma, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(gamutCompress, Gamut Compress, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(JMhOut, Diagnostic JMh Output, DCTLUI_CHECK_BOX, 0)

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__CONSTANT__ float3x3 XYZ_to_RGB_output = {
// XYZ to BT.2020 matrix
    {  1.7166511880f, -0.3556707838f, -0.2533662814f},
    { -0.6666843518f,  1.6164812366f,  0.0157685458f},
    {  0.0176398574f, -0.0427706133f,  0.9421031212f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_output = {
// BT.2020 to XYZ matrix
    {  0.6369580483f,  0.1446169036f,  0.1688809752f},
    {  0.2627002120f,  0.6779980715f,  0.0593017165f},
    {  0.0000000000f,  0.0280726930f,  1.0609850577f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_limit = {
// P3-D65 to XYZ matrix
    {  0.4865709486f,  0.2656676932f,  0.1982172852f},
    {  0.2289745641f,  0.6917385218f,  0.0792869141f},
    { -0.0000000000f,  0.0451133819f,  1.0439443689f}
};

__CONSTANT__ float3 shadowCompressParams = {0.54f, 0.121f, 0.545f}; // 0.121 = max(0.121, 0.132 - 0.00002 * parent.ssts_luminance.z)
__CONSTANT__ float sat = 1.2f;
__CONSTANT__ float shadow_boost = 1.08f; // max(1.08, 1.21 - 0.00015 * parent.ssts_luminance.z)

__CONSTANT__ float limitJmax = 283.25f;

__CONSTANT__ float daniele_n = 1000.0f; // peak white  

// cusp values calculated using Python in https://github.com/nick-shaw/aces-ot-vwg-experiments/blob/d94d1d3b8891fcbd134d417d3374ecdffb4016e9/python/cusp_path.py
// (resulting values saved in ./data/J_cusp_BT709.txt and ./data/M_cusp_BT709.txt)
__CONSTANT__ float2 gamutCuspTable[360] = {
{174.3f, 247.9f},
{173.8f, 247.2f},
{173.2f, 246.5f},
{172.6f, 245.7f},
{172.1f, 245.0f},
{171.4f, 244.2f},
{170.8f, 243.5f},
{170.1f, 242.6f},
{169.4f, 241.7f},
{168.7f, 240.9f},
{167.9f, 239.9f},
{167.1f, 238.9f},
{166.3f, 237.9f},
{165.4f, 236.7f},
{164.6f, 235.7f},
{163.7f, 234.6f},
{162.8f, 233.4f},
{161.8f, 232.2f},
{160.9f, 231.1f},
{159.9f, 229.9f},
{158.9f, 228.6f},
{158.0f, 227.4f},
{157.0f, 226.2f},
{156.0f, 225.0f},
{155.0f, 223.7f},
{154.0f, 222.5f},
{154.6f, 218.7f},
{155.9f, 213.8f},
{157.1f, 209.3f},
{158.4f, 205.0f},
{159.6f, 201.0f},
{160.7f, 197.1f},
{161.9f, 193.6f},
{163.0f, 190.2f},
{164.1f, 187.0f},
{165.2f, 183.9f},
{166.2f, 181.0f},
{167.3f, 178.2f},
{168.3f, 175.7f},
{169.3f, 173.2f},
{170.3f, 170.8f},
{171.2f, 168.6f},
{172.2f, 166.6f},
{173.1f, 164.6f},
{174.1f, 162.7f},
{175.0f, 160.9f},
{175.9f, 159.2f},
{176.8f, 157.6f},
{177.7f, 156.1f},
{178.6f, 154.6f},
{179.4f, 153.2f},
{180.3f, 152.0f},
{181.2f, 150.8f},
{182.0f, 149.6f},
{182.9f, 148.5f},
{183.8f, 147.5f},
{184.6f, 146.5f},
{185.4f, 145.6f},
{186.3f, 144.8f},
{187.1f, 144.0f},
{188.0f, 143.3f},
{188.8f, 142.7f},
{189.6f, 142.0f},
{190.5f, 141.5f},
{191.3f, 141.0f},
{192.2f, 140.5f},
{193.0f, 140.1f},
{193.9f, 139.7f},
{194.7f, 139.4f},
{195.6f, 139.2f},
{196.4f, 138.9f},
{197.3f, 138.8f},
{198.2f, 138.6f},
{199.0f, 138.6f},
{199.9f, 138.6f},
{200.8f, 138.6f},
{201.7f, 138.6f},
{202.6f, 138.7f},
{203.5f, 138.9f},
{204.4f, 139.1f},
{205.4f, 139.4f},
{206.3f, 139.6f},
{207.3f, 140.0f},
{208.3f, 140.4f},
{209.3f, 140.8f},
{210.3f, 141.3f},
{211.3f, 141.9f},
{212.3f, 142.5f},
{213.4f, 143.2f},
{214.5f, 143.8f},
{215.6f, 144.6f},
{216.7f, 145.5f},
{217.8f, 146.3f},
{219.0f, 147.3f},
{220.2f, 148.3f},
{221.5f, 149.3f},
{222.7f, 150.5f},
{224.0f, 151.7f},
{225.4f, 153.0f},
{226.7f, 154.4f},
{228.1f, 155.8f},
{229.6f, 157.4f},
{231.1f, 159.0f},
{232.7f, 160.8f},
{234.3f, 162.6f},
{236.0f, 164.5f},
{237.7f, 166.5f},
{239.5f, 168.7f},
{241.4f, 171.0f},
{243.3f, 173.3f},
{244.5f, 175.3f},
{243.3f, 176.0f},
{242.1f, 176.7f},
{240.9f, 177.5f},
{239.8f, 178.3f},
{238.6f, 179.3f},
{237.4f, 180.3f},
{236.2f, 181.3f},
{235.0f, 182.4f},
{233.7f, 183.6f},
{232.5f, 184.9f},
{231.2f, 186.2f},
{230.0f, 187.7f},
{228.7f, 189.2f},
{227.4f, 190.8f},
{226.1f, 192.5f},
{224.8f, 194.3f},
{223.5f, 196.2f},
{222.1f, 198.1f},
{220.7f, 200.2f},
{219.3f, 202.4f},
{217.9f, 204.8f},
{216.5f, 207.2f},
{215.0f, 209.8f},
{213.5f, 212.5f},
{212.0f, 215.3f},
{210.4f, 218.4f},
{208.8f, 221.5f},
{207.2f, 224.8f},
{205.5f, 228.4f},
{203.8f, 232.0f},
{202.0f, 236.0f},
{200.2f, 240.1f},
{201.5f, 237.2f},
{202.9f, 233.8f},
{204.3f, 230.6f},
{205.7f, 227.4f},
{207.0f, 224.3f},
{208.2f, 221.3f},
{209.4f, 218.4f},
{210.5f, 215.5f},
{211.5f, 212.7f},
{212.6f, 210.0f},
{213.6f, 207.3f},
{214.5f, 204.6f},
{215.4f, 202.0f},
{216.3f, 199.5f},
{217.2f, 197.0f},
{218.0f, 194.6f},
{218.8f, 192.2f},
{219.6f, 189.9f},
{220.3f, 187.5f},
{221.1f, 185.3f},
{221.8f, 183.1f},
{222.5f, 180.9f},
{223.2f, 178.8f},
{223.9f, 176.7f},
{224.6f, 174.7f},
{225.3f, 172.7f},
{226.0f, 170.8f},
{226.6f, 168.9f},
{227.3f, 167.0f},
{227.9f, 165.2f},
{228.6f, 163.4f},
{229.2f, 161.7f},
{229.9f, 160.0f},
{230.5f, 158.3f},
{231.2f, 156.6f},
{231.9f, 155.0f},
{232.5f, 153.5f},
{233.2f, 152.0f},
{233.8f, 150.6f},
{234.5f, 149.2f},
{235.2f, 147.9f},
{235.9f, 146.6f},
{236.5f, 145.4f},
{237.2f, 144.3f},
{237.9f, 143.2f},
{238.6f, 142.1f},
{239.3f, 141.2f},
{240.0f, 140.2f},
{240.7f, 139.3f},
{241.4f, 138.5f},
{242.1f, 137.7f},
{242.8f, 136.9f},
{241.3f, 135.2f},
{239.6f, 133.5f},
{238.0f, 131.8f},
{236.4f, 130.2f},
{234.9f, 128.7f},
{233.4f, 127.2f},
{232.0f, 125.8f},
{230.5f, 124.5f},
{229.1f, 123.2f},
{227.8f, 122.0f},
{226.5f, 120.8f},
{225.1f, 119.6f},
{223.9f, 118.6f},
{222.6f, 117.5f},
{221.4f, 116.5f},
{220.2f, 115.6f},
{219.0f, 114.7f},
{217.8f, 113.8f},
{216.6f, 112.9f},
{215.5f, 112.2f},
{214.4f, 111.4f},
{213.3f, 110.7f},
{212.2f, 110.0f},
{211.2f, 109.4f},
{210.1f, 108.7f},
{209.1f, 108.2f},
{208.0f, 107.6f},
{207.0f, 107.1f},
{206.0f, 106.6f},
{205.1f, 106.1f},
{204.1f, 105.7f},
{203.1f, 105.3f},
{202.1f, 105.0f},
{201.2f, 104.6f},
{200.3f, 104.3f},
{199.3f, 104.0f},
{198.4f, 103.8f},
{197.5f, 103.6f},
{196.6f, 103.4f},
{195.7f, 103.2f},
{194.8f, 103.0f},
{193.9f, 102.9f},
{193.0f, 102.8f},
{192.1f, 102.7f},
{191.2f, 102.7f},
{190.4f, 102.7f},
{189.5f, 102.7f},
{188.6f, 102.7f},
{187.7f, 102.8f},
{186.9f, 102.9f},
{186.0f, 103.0f},
{185.2f, 103.1f},
{184.3f, 103.3f},
{183.4f, 103.5f},
{182.6f, 103.7f},
{181.7f, 103.9f},
{180.9f, 104.2f},
{180.0f, 104.5f},
{179.1f, 104.8f},
{178.3f, 105.2f},
{177.4f, 105.6f},
{176.6f, 106.0f},
{175.7f, 106.4f},
{174.8f, 106.9f},
{173.9f, 107.4f},
{173.1f, 107.9f},
{172.2f, 108.5f},
{171.3f, 109.1f},
{170.4f, 109.7f},
{169.5f, 110.4f},
{168.6f, 111.1f},
{167.7f, 111.8f},
{166.8f, 112.6f},
{165.9f, 113.4f},
{165.0f, 114.2f},
{164.0f, 115.1f},
{163.1f, 116.1f},
{162.1f, 117.0f},
{161.2f, 118.0f},
{160.2f, 119.1f},
{159.2f, 120.2f},
{158.2f, 121.3f},
{157.2f, 122.5f},
{156.2f, 123.8f},
{155.2f, 125.1f},
{154.2f, 126.5f},
{153.1f, 127.9f},
{152.1f, 129.4f},
{151.0f, 130.9f},
{149.9f, 132.5f},
{149.9f, 133.2f},
{150.5f, 133.4f},
{151.1f, 133.6f},
{151.8f, 133.9f},
{152.4f, 134.3f},
{153.0f, 134.6f},
{153.6f, 135.0f},
{154.3f, 135.5f},
{154.9f, 135.9f},
{155.6f, 136.5f},
{156.3f, 137.1f},
{156.9f, 137.7f},
{157.6f, 138.3f},
{158.3f, 139.1f},
{159.0f, 139.8f},
{159.7f, 140.6f},
{160.4f, 141.4f},
{161.2f, 142.3f},
{161.9f, 143.3f},
{162.7f, 144.3f},
{163.5f, 145.3f},
{164.3f, 146.4f},
{165.1f, 147.6f},
{165.9f, 148.8f},
{166.8f, 150.1f},
{167.6f, 151.4f},
{168.5f, 152.8f},
{169.4f, 154.3f},
{170.4f, 155.8f},
{171.3f, 157.5f},
{172.3f, 159.2f},
{173.3f, 160.9f},
{174.3f, 162.8f},
{175.4f, 164.7f},
{176.5f, 166.7f},
{177.6f, 168.8f},
{178.8f, 171.0f},
{180.0f, 173.3f},
{181.3f, 175.7f},
{182.5f, 178.2f},
{183.9f, 180.8f},
{185.3f, 183.5f},
{186.7f, 186.4f},
{188.2f, 189.4f},
{189.7f, 192.4f},
{191.4f, 195.7f},
{193.0f, 199.1f},
{194.8f, 202.6f},
{196.6f, 206.3f},
{198.5f, 210.2f},
{200.5f, 214.2f},
{202.6f, 218.4f},
{204.8f, 222.8f},
{207.1f, 227.4f},
{205.2f, 228.3f},
{203.3f, 229.1f},
{201.3f, 230.0f},
{199.5f, 231.0f},
{197.7f, 231.9f},
{195.9f, 233.0f},
{194.2f, 233.9f},
{192.5f, 235.0f},
{190.8f, 236.1f},
{189.2f, 237.2f},
{187.7f, 238.3f},
{186.1f, 239.5f},
{184.7f, 240.6f},
{183.2f, 241.8f},
{181.8f, 243.0f},
{180.5f, 244.3f},
{179.2f, 245.5f},
{177.9f, 246.8f},
{176.7f, 248.1f},
{175.5f, 249.3f},
{174.9f, 248.6f}
};

#include "hellwig_lib.h"

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 in = make_float3(p_R, p_G, p_B);
    float3 out = in;
    in.x = _clampf(in.x, -HALF_MAXIMUM, HALF_MAXIMUM);
    in.y = _clampf(in.y, -HALF_MAXIMUM, HALF_MAXIMUM);
    in.z = _clampf(in.z, -HALF_MAXIMUM, HALF_MAXIMUM);

    float3 XYZ = vector_dot(AP0_ACES_to_XYZ_matrix, in);
    XYZ *= referenceLuminance;
    float3 inWhite = vector_dot(AP0_ACES_to_XYZ_matrix, make_float3(100.0f, 100.0f, 100.0f));
    float3 JMh = XYZ_to_Hellwig2022_JMh(XYZ, inWhite);
    if (toneCurve)
    {
        JMh = forwardTonescale(JMh, compressChroma);
    }
    if (gamutCompress)
    {
        JMh = compressGamut(JMh, 0);
    }
    if (JMhOut)
    {
        out.x = JMh.x / referenceLuminance;
        out.y = JMh.y / referenceLuminance;
        out.z = JMh.z / 360.0f;
    }
    else
    {
        XYZ = Hellwig2022_JMh_to_XYZ(JMh , d65White) / referenceLuminance;
        out = vector_dot(XYZ_to_RGB_output, XYZ);
        // trap black pixel NaNs
        if (isnan(JMh.x))
        {
            out = make_float3(0.0f, 0.0f, 0.0f);
        }
        out.x = linear_to_ST2084(out.x * 100.0f);
        out.y = linear_to_ST2084(out.y * 100.0f);
        out.z = linear_to_ST2084(out.z * 100.0f);
    }

    return out ;
}